# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:00:07+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, constr


class Address(BaseModel):
    city: constr(max_length=3000) = Field(
        ..., description='The name of the city. Maximum length: 3000 characters.'
    )
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    houseNumberOrName: constr(max_length=3000) = Field(
        ...,
        description='The number or name of the house. Maximum length: 3000 characters.',
    )
    postalCode: str = Field(
        ...,
        description='A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )
    street: constr(max_length=3000) = Field(
        ...,
        description='The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.',
    )


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class BalancePlatformNotificationResponse(BaseModel):
    notificationResponse: Optional[str] = Field(
        None,
        description='Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).',
    )


class Type(Enum):
    balancePlatform_incomingTransfer_updated = (
        'balancePlatform.incomingTransfer.updated'
    )
    balancePlatform_incomingTransfer_created = (
        'balancePlatform.incomingTransfer.created'
    )


class Name(BaseModel):
    firstName: Optional[str] = Field(None, description='The first name.')
    fullName: Optional[str] = Field(None, description='The full name.')
    infix: Optional[str] = Field(None, description='The infix in the name, if any.')
    lastName: Optional[str] = Field(None, description='The last name.')


class NameLocation(BaseModel):
    city: Optional[str] = Field(
        None, description='The city where the merchant is located.'
    )
    country: Optional[str] = Field(
        None,
        description='The country where the merchant is located in [three-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
    )
    countryOfOrigin: Optional[str] = Field(
        None,
        description='The home country in [three-digit country code](https://en.wikipedia.org/wiki/ISO_3166-1_numeric) format, used for government-controlled merchants such as embassies.',
    )
    name: Optional[str] = Field(
        None, description="The name of the merchant's shop or service."
    )
    rawData: Optional[str] = Field(None, description='The raw data.')
    state: Optional[str] = Field(
        None, description='The state where the merchant is located.'
    )


class NotificationModificationData(BaseModel):
    amount: Optional[Amount] = Field(
        None,
        description="The amount of the modification converted to the balance account's currency, in case the original transaction currency is different. For example, if a part of an authorised amount was cancelled, the value shows the amount that was cancelled.\n\n * A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ",
    )
    type: Optional[str] = Field(
        None,
        description='The type of modification.\n\nPossible values: **Authorised**, **Cancelled**, **Captured**, **Error**, **Expired**, **OutgoingTransfer**, **PendingIncomingTransfer**, **PendingRefund**, **IncomingTransfer**, **Refunded**, **Refused**, **AuthAdjustmentAuthorised**.',
    )


class ProcessingType(Enum):
    atmWithdraw = 'atmWithdraw'
    balanceInquiry = 'balanceInquiry'
    ecommerce = 'ecommerce'
    moto = 'moto'
    pos = 'pos'
    purchaseWithCashback = 'purchaseWithCashback'
    recurring = 'recurring'
    token = 'token'
    unknown = 'unknown'


class Type1(Enum):
    balancePlatform_outgoingTransfer_created = (
        'balancePlatform.outgoingTransfer.created'
    )
    balancePlatform_outgoingTransfer_updated = (
        'balancePlatform.outgoingTransfer.updated'
    )


class Type2(Enum):
    balancePlatform_payment_created = 'balancePlatform.payment.created'
    balancePlatform_payment_updated = 'balancePlatform.payment.updated'


class Type3(Enum):
    BalanceAccount = 'BalanceAccount'
    Commission = 'Commission'
    Default = 'Default'
    PaymentFee = 'PaymentFee'
    VAT = 'VAT'


class PlatformPayment(BaseModel):
    account: Optional[str] = Field(
        None, description='The account given in the related split.'
    )
    description: Optional[str] = Field(
        None, description='The description of the related split.'
    )
    modificationMerchantReference: Optional[str] = Field(
        None, description='The merchant reference of the modification.'
    )
    modificationPspReference: Optional[str] = Field(
        None, description='The pspReference of the modification.'
    )
    paymentMerchantReference: Optional[str] = Field(
        None, description='The merchant reference of the payment.'
    )
    paymentPspReference: Optional[str] = Field(
        None, description='The pspReference of the payment.'
    )
    reference: Optional[str] = Field(
        None, description='The reference of the related split.'
    )
    type: Optional[Type3] = Field(None, description='The type of the related split.')


class RelayedAuthorisationData(BaseModel):
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='The `metadata` object from the relayed authorisation response from your server.',
    )
    reference: Optional[str] = Field(
        None,
        description='The `reference` from the relayed authorisation response from your server.',
    )
    status: Optional[str] = Field(
        None,
        description='The value can be **Authorised** or **Refused**, based on the `authorisationDecision.status` in the relayed authorisation response from your server.',
    )


class Resource(BaseModel):
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')


class ResourceReference(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the resource.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    reference: Optional[str] = Field(
        None, description='The reference for the resource.'
    )


class TransactionRuleReference(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the resource.'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    reference: Optional[str] = Field(
        None, description='The reference for the resource.'
    )


class TransactionRuleSource(BaseModel):
    id: Optional[str] = Field(None, description='ID of the resource, when applicable.')
    type: Optional[str] = Field(
        None,
        description='Indicates the type of resource for which the transaction rule is defined.\n\nPossible values:\n\n * **PaymentInstrumentGroup**\n\n* **PaymentInstrument**\n\n* **BalancePlatform**\n\n* **EntityUsageConfiguration**\n\n* **PlatformRule**: The transaction rule is a platform-wide rule imposed by Adyen.',
    )


class ValidationResult(BaseModel):
    result: Optional[str] = Field(
        None,
        description='The result of the check.\n\nPossible values:\n\n- **valid**: The validation was successful.\n\n- **invalid**: The validation failed.\n\n- **notValidated**: The validation was not performed because some services were unreachable or Adyen does not have the information needed to perform the check.\n\n- **notApplicable**: The validation is not applicable.',
    )
    type: Optional[str] = Field(None, description='Type of check.')


class BankAccountInfo(BaseModel):
    address: Optional[Address] = Field(
        None, description='The address of the bank account owner.'
    )
    iban: Optional[str] = Field(
        None,
        description='The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.',
    )
    ownerName: Optional[Name] = Field(
        None, description='The name of the bank account owner.'
    )


class MerchantData(BaseModel):
    mcc: Optional[str] = Field(None, description='The merchant category code.')
    merchantId: Optional[str] = Field(None, description='The merchant identifier.')
    nameLocation: Optional[NameLocation] = Field(
        None, description="Contains the merchant's name and location."
    )
    postalCode: Optional[str] = Field(None, description='The merchant postal code.')


class TransactionEventViolation(BaseModel):
    reason: Optional[str] = Field(
        None, description='An explanation about why the transaction rule failed.'
    )
    transactionRule: Optional[TransactionRuleReference] = Field(
        None, description='Contains information about the transaction rule.'
    )
    transactionRuleSource: Optional[TransactionRuleSource] = Field(
        None,
        description='Contains the type and ID of the resource to which the transaction rule is linked.',
    )


class TransactionRulesResult(BaseModel):
    advice: Optional[str] = Field(
        None, description='The advice given by the Risk analysis.'
    )
    allRulesPassed: Optional[bool] = Field(
        None,
        description='Indicates whether the transaction passed the evaluation for all transaction rules.',
    )
    failedTransactionRules: Optional[List[TransactionEventViolation]] = Field(
        None,
        description='Array containing all the transaction rules that the transaction violated. This list is only sent when `allRulesPassed` is **false**.',
    )
    score: Optional[int] = Field(None, description='The score of the Risk analysis.')


class Counterparty(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).',
    )
    bankAccount: Optional[BankAccountInfo] = Field(
        None, description='Contains information about the bank account.'
    )
    merchant: Optional[MerchantData] = Field(
        None, description='Contains information about the merchant.'
    )
    transferInstrumentId: Optional[str] = Field(
        None,
        description='Unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).',
    )


class IncomingTransferNotificationData(BaseModel):
    accountHolder: Optional[ResourceReference] = Field(
        None, description='Contains information about the account holder.'
    )
    amount: Optional[Amount] = Field(
        None,
        description="The amount converted to the balance account's currency, in case the original transaction currency is different.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ",
    )
    balanceAccount: Optional[ResourceReference] = Field(
        None, description='Contains information about the balance account.'
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    counterparty: Optional[Counterparty] = Field(
        None,
        description='Contains information about the other party in the transaction.',
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    description: Optional[str] = Field(
        None,
        description='Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    modification: Optional[NotificationModificationData] = Field(
        None,
        description='Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.',
    )
    originalAmount: Optional[Amount] = Field(
        None,
        description='The amount in the original currency of the transaction.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ',
    )
    paymentId: Optional[str] = Field(
        None,
        description='The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.',
    )
    paymentInstrument: Optional[ResourceReference] = Field(
        None, description='Contains information about the payment instrument.'
    )
    platformPayment: Optional[PlatformPayment] = Field(
        None, description='Contains information about the related platform payment.'
    )
    reference: Optional[constr(max_length=80)] = Field(
        None, description='An Adyen-generated unique reference for the transfer.'
    )
    referenceForBeneficiary: Optional[constr(max_length=80)] = Field(
        None,
        description='The reference sent to or received from the counterparty.\n\n* For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.\n\n * For incoming funds, this is the reference from the sender.',
    )
    status: Optional[str] = Field(
        None,
        description='The event status. The possible values depend on the `type`.\n\n* **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`\n\n * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`\n\n* **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created` \n\n* **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`\n\n * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`\n\n* **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`\n\n  ',
    )
    valueDate: Optional[datetime] = Field(
        None,
        description='Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.',
    )


class IncomingTransferNotificationRequest(BaseModel):
    data: IncomingTransferNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type = Field(..., description='Type of notification.')


class OutgoingTransferNotificationData(BaseModel):
    accountHolder: Optional[ResourceReference] = Field(
        None, description='Contains information about the account holder.'
    )
    amount: Optional[Amount] = Field(
        None,
        description="The amount converted to the balance account's currency, in case the original transaction currency is different.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ",
    )
    balanceAccount: Optional[ResourceReference] = Field(
        None, description='Contains information about the balance account.'
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    counterparty: Counterparty = Field(
        ...,
        description='Contains information about the other party in the transaction.',
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    description: Optional[str] = Field(
        None,
        description='Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    merchantData: Optional[MerchantData] = Field(
        None,
        description='Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.',
    )
    modification: Optional[NotificationModificationData] = Field(
        None,
        description='Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.',
    )
    originalAmount: Optional[Amount] = Field(
        None,
        description='The amount in the original currency of the transaction.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ',
    )
    paymentId: Optional[str] = Field(
        None,
        description='The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.',
    )
    paymentInstrument: Optional[ResourceReference] = Field(
        None, description='Contains information about the payment instrument.'
    )
    platformPayment: Optional[PlatformPayment] = Field(
        None, description='Contains information about the related platform payment.'
    )
    processingType: Optional[ProcessingType] = Field(
        None,
        description='Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.',
    )
    purposeCode: Optional[str] = Field(
        None,
        description='Indicates the purpose of the outgoing transfer. Adyen sets this to:\n\n* **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.\n\n * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).',
    )
    reference: Optional[constr(max_length=80)] = Field(
        None,
        description="The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.",
    )
    referenceForBeneficiary: Optional[constr(max_length=80)] = Field(
        None,
        description='The reference sent to or received from the counterparty.\n\n* For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.\n\n * For incoming funds, this is the reference from the sender.',
    )
    relayedAuthorisationData: Optional[RelayedAuthorisationData] = Field(
        None,
        description="If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.",
    )
    status: Optional[str] = Field(
        None,
        description='The event status. The possible values depend on the `type`.\n\n* **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`\n\n * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`\n\n* **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created` \n\n* **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`\n\n * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`\n\n* **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`\n\n  ',
    )
    transactionRulesResult: Optional[TransactionRulesResult] = Field(
        None,
        description='Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).',
    )
    valueDate: Optional[datetime] = Field(
        None,
        description='Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.',
    )


class OutgoingTransferNotificationRequest(BaseModel):
    data: OutgoingTransferNotificationData = Field(
        ..., description='Contains details about the event.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type1 = Field(..., description='Type of notification.')


class PaymentNotificationData(BaseModel):
    accountHolder: Optional[ResourceReference] = Field(
        None, description='Contains information about the account holder.'
    )
    amount: Optional[Amount] = Field(
        None,
        description="The amount converted to the balance account's currency, in case the original transaction currency is different.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ",
    )
    authCode: Optional[str] = Field(
        None, description='The authorisation code for the payment.'
    )
    balanceAccount: Optional[ResourceReference] = Field(
        None, description='Contains information about the balance account.'
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    description: Optional[str] = Field(
        None,
        description='Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    merchantData: Optional[MerchantData] = Field(
        None,
        description='Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.',
    )
    modification: Optional[NotificationModificationData] = Field(
        None,
        description='Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.',
    )
    originalAmount: Optional[Amount] = Field(
        None,
        description='The amount in the original currency of the transaction.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ',
    )
    paymentInstrument: Optional[ResourceReference] = Field(
        None, description='Contains information about the payment instrument.'
    )
    platformPayment: Optional[PlatformPayment] = Field(
        None, description='Contains information about the related platform payment.'
    )
    processingType: Optional[ProcessingType] = Field(
        None,
        description='Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.',
    )
    reference: Optional[constr(max_length=80)] = Field(
        None,
        description="The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.",
    )
    referenceForBeneficiary: Optional[constr(max_length=80)] = Field(
        None,
        description='The reference sent to or received from the counterparty.\n\n* For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.\n\n * For incoming funds, this is the reference from the sender.',
    )
    relayedAuthorisationData: Optional[RelayedAuthorisationData] = Field(
        None,
        description="If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.",
    )
    status: Optional[str] = Field(
        None,
        description='The event status. The possible values depend on the `type`.\n\n* **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`\n\n * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`\n\n* **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created` \n\n* **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`\n\n * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`\n\n* **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`\n\n  ',
    )
    transactionRulesResult: Optional[TransactionRulesResult] = Field(
        None,
        description='Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).',
    )
    validationResult: Optional[List[ValidationResult]] = Field(
        None,
        description='Array of checks that Adyen performed to validate the payment and the result of each.',
    )


class PaymentNotificationRequest(BaseModel):
    data: PaymentNotificationData = Field(..., description='Contains event details.')
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type2 = Field(..., description='Type of notification.')


class TransactionNotificationData(BaseModel):
    accountHolder: Optional[ResourceReference] = Field(
        None, description='Contains information about the account holder.'
    )
    amount: Optional[Amount] = Field(
        None,
        description="The amount converted to the balance account's currency, in case the original transaction currency is different.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ",
    )
    authCode: Optional[str] = Field(
        None, description='The authorisation code for the payment.'
    )
    balanceAccount: Optional[ResourceReference] = Field(
        None, description='Contains information about the balance account.'
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    counterparty: Counterparty = Field(
        ...,
        description='Contains information about the other party in the transaction.',
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    description: Optional[str] = Field(
        None,
        description='Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    merchantData: Optional[MerchantData] = Field(
        None,
        description='Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.',
    )
    modification: Optional[NotificationModificationData] = Field(
        None,
        description='Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.',
    )
    originalAmount: Optional[Amount] = Field(
        None,
        description='The amount in the original currency of the transaction.\n\n* A _positive_ value means the amount is added to the balance account.\n\n * A _negative_ value means the amount is deducted from the balance account. ',
    )
    paymentId: Optional[str] = Field(
        None,
        description='The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.',
    )
    paymentInstrument: Optional[ResourceReference] = Field(
        None, description='Contains information about the payment instrument.'
    )
    platformPayment: Optional[PlatformPayment] = Field(
        None, description='Contains information about the related platform payment.'
    )
    processingType: Optional[ProcessingType] = Field(
        None,
        description='Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.',
    )
    purposeCode: Optional[str] = Field(
        None,
        description='Indicates the purpose of the outgoing transfer. Adyen sets this to:\n\n* **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.\n\n * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).',
    )
    reference: Optional[constr(max_length=80)] = Field(
        None,
        description="The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.",
    )
    referenceForBeneficiary: Optional[constr(max_length=80)] = Field(
        None,
        description='The reference sent to or received from the counterparty.\n\n* For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.\n\n * For incoming funds, this is the reference from the sender.',
    )
    relayedAuthorisationData: Optional[RelayedAuthorisationData] = Field(
        None,
        description="If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.",
    )
    status: Optional[str] = Field(
        None,
        description='The event status. The possible values depend on the `type`.\n\n* **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`\n\n * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`\n\n* **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created` \n\n* **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`\n\n * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`\n\n* **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`\n\n  ',
    )
    transactionRulesResult: Optional[TransactionRulesResult] = Field(
        None,
        description='Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).',
    )
    validationResult: Optional[List[ValidationResult]] = Field(
        None,
        description='Array of checks that Adyen performed to validate the payment and the result of each.',
    )
    valueDate: Optional[datetime] = Field(
        None,
        description='Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.',
    )
